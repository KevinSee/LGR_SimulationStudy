model {

	####################################
	# Set up parameters and initial states...
	####################################
	for(i in 1:2){
		acf[i] ~ dunif(-2,2) # unif prior on temporal correlation @ lag 1 
	}
	
	X.sigma ~ dunif(0, 20) # process error in log space
	X.tau <- pow(X.sigma, -2)
	X.log.all[1] ~ dunif(0,10) # initial state in log space
	
	# for over-dispersed negative binomial
# 	r ~ dgamma(0.01, 0.01)
# 	k <- 1/r
    theta ~ dgamma(0.01, 0.01)
	omega ~ dgamma(0.01, 0.01)

			
	# modeling proportion of fish available for window counts
	win.prop.avg ~ dbeta(1,1)	# avg daytime ascension rate
	win.prop.avg.logit <- logit(win.prop.avg)
	win.prop.true.logit[1] ~ dnorm(win.prop.avg.logit, win.prop.tau)
	win.prop.sigma ~ dunif(0, 10) # process error on window proportion correction
	win.prop.tau <- pow(win.prop.sigma, -2)
	
	# modeling proportion of fish re-ascending the dam
	reasc.avg ~ dbeta(1,1)	# avg re-ascension rate
	reasc.avg.logit <- logit(reasc.avg)
	reasc.true.logit[1] ~ dnorm(reasc.avg.logit, reasc.tau)
	reasc.sigma ~ dunif(0, 10) # process error on re-ascension proportion correction
	reasc.tau <- pow(reasc.sigma, -2)

	# modeling proportion of fish that are wild, hatchery and hatchery no-clip
	# set probability for any type of fish that was never caught to 0
	# prior on log odds ratio for initial week
	for(j in 1:2) {
	  org.phi[1,j] ~ dnorm(0, 0.01)
	  exp.org.phi[1,j] <- exp(org.phi[1,j]) * org.exist[j]
	}
	
	# set hatchery no-clip as baseline
	for(i in 1:TotLadderWeeks) {
	  org.phi[i,3] <- 0
	  exp.org.phi[i,3] <- exp(org.phi[i,3]) * org.exist[3]
	  # get sum of all phi's
	  sum.exp.phi[i] <- sum(exp.org.phi[i,])
	}
	
	# extract initial movement probabilities for week 1
	for(j in 1:3) {
	  org.prop[1,j] <- ifelse(org.exist[j] == 0, 0, exp.org.phi[1,j] / sum.exp.phi[1])
	}
	
	# variation in time-varying random walk movement probabilities
	org.sigma ~ dunif(0,10)
	org.tau <- pow(org.sigma, -2)
	
	for(i in 2:TotLadderWeeks) {
	  for(j in 1:2) {
		epsilon[i,j] ~ dnorm(0, org.tau)
		# set phi for any type of fish that was never caught to 0
		org.phi[i,j] <- ifelse(org.exist[j] == 0, 0, org.phi[i - 1, j] + epsilon[i,j])
		exp.org.phi[i,j] <- exp(org.phi[i,j]) * org.exist[j]
	  }
	
	  for (j in 1:3) {
		org.prop[i,j] <- exp.org.phi[i,j] / sum.exp.phi[i]
	  }
	}
	
	# parameter clean-up				
	for(i in 1:TotLadderWeeks) {
		win.prop.true[i] <- ilogit(win.prop.true.logit[i])
		reasc.true[i] <- ilogit(reasc.true.logit[i])
	}
	
	####################################
	## True state of nature
	####################################
		
	for(i in 2:TotLadderWeeks) {
		# random walk
		X.log.all[i] ~ dnorm(X.log.all[i-1], X.tau)		
		
		# autocorrelated random walks
		win.prop.mu[i] <- win.prop.avg.logit * (1-acf[1]) + acf[1] * logit(true.prop[i-1])
		win.prop.true.logit[i] ~ dnorm(win.prop.mu[i], win.prop.tau)
		
		reasc.mu[i] <- reasc.avg.logit * (1-acf[2]) + acf[2] * reasc.true.logit[i-1]
		reasc.true.logit[i] ~ dnorm(reasc.mu[i], reasc.tau)
	}
		
	# derived parameters
	for(i in 1:TotLadderWeeks) {
		true.prop[i] <- win.prop.true[i]
		
		X.all[i] <- round(exp(X.log.all[i]))
		X.day[i] <- round(X.all[i] * true.prop[i])
		X.night[i] <- X.all[i] - X.day[i]
		X.reasc[i] <- round(X.all[i] * reasc.true[i])
		
		X.all.wild[i] <- round(X.all[i] * org.prop[i,1])
		X.all.hatch[i] <- round(X.all[i] * org.prop[i,2])
		X.all.hnc[i] <- round(X.all[i] * org.prop[i,3])
		
		X.new.wild[i] <- round(X.all.wild[i] * (1-reasc.true[i]))
		X.new.hatch[i] <- round(X.all.hatch[i] * (1-reasc.true[i]))
		X.new.hnc[i] <- round(X.all.hnc[i] * (1-reasc.true[i]))
		
		X.reasc.wild[i] <- X.all.wild[i] - X.new.wild[i]
		X.night.wild[i] <- X.new.wild[i] * (1-true.prop[i])

	}
				
	####################################
	## What we observe
	####################################
	
	for(i in 1:TotLadderWeeks) {
		# at window: over-dispersed negative binomial
		# overdispersed if r is small, approximately Poisson if r is very large
# 		p[i] <- r / (r + X.day[i])
# 		Y.window[i] ~ dnegbin(p[i], r)
		
		# at window: special version of negative binomial
		# if theta = 0, quasi-Poisson; if omega = 1, negative binomial
		p[i] <- 1 / (omega + theta * X.day[i])
		r[i] <- X.day[i] / (omega - 1 + theta * X.day[i])
		Y.window[i] ~ dnegbin(p[i], r[i])
		
		# in trap
		# uncertainty in trap rate
		trap.rate.true[i] ~ dbeta(trap.alpha[i], trap.beta[i])
		Y.trap[i] ~ dbin(trap.rate.true[i], X.all[i])
		
		# fish in trap by origin
		wild.pbt[i] ~ dbin(org.prop[i,1], trap.fish[i])
		hatch.pbt[i] ~ dbin(org.prop[i,2], trap.fish[i])
		hnc.pbt[i] ~ dbin(org.prop[i,3], trap.fish[i])

		# day-time tags
		DC.tags[i] ~ dbin(win.prop.true[i], Tot.tags[i])
				
		# re-ascension tags
		ReAsc.tags[i] ~ dbin(reasc.true[i], Tot.tags[i])
	}
	
	####################################
	## Summary statistics
	####################################
	
	X.tot.all <- sum(X.all)
	X.tot.day <- sum(X.day)
	X.tot.night <- sum(X.night)
	X.tot.reasc <- sum(X.reasc)

	X.tot.all.wild <- sum(X.all.wild)
	X.tot.all.hatch <- sum(X.all.hatch)
	X.tot.all.hnc <- sum(X.all.hnc)
	
	X.tot.new.wild <- sum(X.new.wild)
	X.tot.new.hatch <- sum(X.new.hatch)
	X.tot.new.hnc <- sum(X.new.hnc)
	
	X.tot.night.wild <- sum(X.night.wild)
	X.tot.reasc.wild <- sum(X.reasc.wild)

	prop.tagged <- sum(wild.pbt) / X.tot.new.wild
		
}
